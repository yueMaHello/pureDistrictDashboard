#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('te:server');
var http = require('http');
var fs = require('fs');
var readline = require('readline');
var parse = require('csv-parse');
const LineByLineReader = require('line-by-line');


/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3042');
app.set('port', port);



/**
 * Create HTTP server.
 */
var data ={};
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});
var server = http.createServer(app);
var a = null;
var zoneToDistrict={};
//ask the Admin whether he just updated the dataset,
//If he updated the dataset before starting the app server, he should answer 'y'
//Then the app will generate output.json based on his new trip dataset
rl.question('Did you renew the trips_1 dataset or DistrictVSZone.csv? (y/n)', (answer) => {
    rl.close();
    a = answer;

    if(a==='y'){
        console.log('The App will read the newest tripsDataset. It may take several minutes.');
        //read csv file line by line



        fs.createReadStream('./public/data/DistrictVSZone.csv')
            .pipe(parse({delimiter: ','}))
            .on('data', function(csvrow) {
                //do something with csvrow
                zoneToDistrict[csvrow[0]] = csvrow[1];
            })
            .on('end',function() {
                //do something wiht zoneToDistrict
                var lr = new LineByLineReader('./public/data/trips_1.csv');
                lr.on('error',function(err){});
                lr.on('line',function(line) {
                    line = line.split(",");

                    initializeData(line)
                });
                //finish reading. Write the result into output.json file
                lr.on('end',function(){
                    var jsonContent = JSON.stringify(data);
                    fs.writeFile('./public/outputData/output.json',jsonContent,'utf8',function(err){
                        if(err){
                            console.log('An error occured while writing JSON object to file');
                            return console.log(err)
                        }
                    });
                    console.log('Json file has been saved');
                    console.log('The app is running on port '+port);
                    //start the server
                    server.listen(port);
                    server.on('error', onError);
                    server.on('listening', onListening);
                });
            });
    }
    else{//the user hasn't updated the trips_1.csv dataset
        console.log('The app is running on port '+port);
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    }
});
function initializeData(line){
    //if this zone hasn't been initialized
    if (!(zoneToDistrict[line[6]] in data)) {
        //this is info of a single travel zone
        data[zoneToDistrict[line[6]]] = {
            'Person#': {'P': 0, 'C': 0, 'W': 0, 'L': 0, 'H': 0, 'R': 0, 'Q': 0, 'T': 0, 'S': 0},
            'Mode': {'Walk': 0, 'HOV2': 0, 'SB': 0, 'PNR': 0, 'WAT': 0, 'SOV': 0, 'Bike': 0, 'HOV3': 0, 'KNR': 0},
            'TourPurp': {'P': 0, 'C': 0, 'W': 0, 'L': 0, 'H': 0, 'R': 0, 'Q': 0, 'T': 0, 'S': 0},
            'Dist': {'P': 0, 'C': 0, 'W': 0, 'L': 0, 'H': 0, 'R': 0, 'Q': 0, 'T': 0, 'S': 0},
            'Own': {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0},
            'IncGrp': {'Lo': 0, 'Med': 0, 'Hi': 0},
            'HHSize': {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0},
            'TourDistByPurp': {
                'P': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'C': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'W': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'L': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'H': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'R': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'Q': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'T': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0},
                'S': {'0~5': 0, '5~10': 0, '10~15': 0, '15~20': 0, '20~25': 0, '25~30': 0, '30+': 0}
            }
        };
    }
    return callback(line);


}
//convert this line's record and store into json format
function callback(line){
    if(!Number(line[0])){
        return
    }
    let thisDict = zoneToDistrict[line[6]];
    data[thisDict]['Person#'][line[18]] += parseFloat(line[3]);
    data[thisDict]['Mode'][line[14]] += 1;
    data[thisDict]['TourPurp'][line[18]] += 1;
    data[thisDict]['Dist'][line[18]] += parseFloat(line[19]);
    data[thisDict]['IncGrp'][line[21]] += 1;
    data[thisDict]['HHSize'][line[23]] += 1;
    data[thisDict]['Own'][line[20]] += 1;
    if (parseFloat(line[19]) < 5) {
        data[thisDict]['TourDistByPurp'][line[18]]['0~5'] += 1
    }
    else if (parseFloat(line[19]) < 10) {
        data[thisDict]['TourDistByPurp'][line[18]]['5~10'] += 1
    }
    else if (parseFloat(line[19]) < 15) {
        data[thisDict]['TourDistByPurp'][line[18]]['10~15'] += 1
    }
    else if (parseFloat(line[19]) < 20) {
        data[thisDict]['TourDistByPurp'][line[18]]['15~20'] += 1
    }
    else if (parseFloat(line[19]) < 25) {
        data[thisDict]['TourDistByPurp'][line[18]]['20~25'] += 1
    }
    else if (parseFloat(line[19]) < 30) {
        data[thisDict]['TourDistByPurp'][line[18]]['25~30'] += 1
    }
    else {
        data[thisDict]['TourDistByPurp'][line[18]]['30+'] += 1
    }
}
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
